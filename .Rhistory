lower = "number",
upper = "circle",
tl.pos = "d",
tl.cex = 1,
number.cex = 1,
cl.cex = 1.5,
title="Correlation Matrix for consolidated 5-Point Ratings",
cex.main = 2,
mar=c(0,0,5,0) # fixes the position of title
)
#title("Correlation Matrix for consolidated 5-Point Ratings", line = 1, cex.main = 2)
# Create a correlation matrix with the combined ratings fields
cor_matrix_2 <- cor(data_ratings_combined)
# Visualize the correlation matrix
loadPkg("corrplot")
corrplot.mixed(
cor_matrix_2,
lower = "number",
upper = "circle",
tl.pos = "d",
tl.cex = 1,
number.cex = 1,
cl.cex = 1.5,
title="Correlation Matrix for consolidated 5-Point Ratings",
cex.main = 2,
mar=c(0,0,5,0) # fixes the position of title
)
#title("Correlation Matrix for consolidated 5-Point Ratings", line = 1, cex.main = 2)
# Create a correlation matrix with the combined ratings fields
cor_matrix_2 <- cor(data_ratings_combined)
# Visualize the correlation matrix
loadPkg("corrplot")
corrplot.mixed(
cor_matrix_2,
lower = "number",
upper = "circle",
tl.pos = "d",
tl.cex = 1,
number.cex = 1,
cl.cex = 1.5,
title="Correlation Matrix for consolidated 5-Point Ratings",
cex.main = 2,
mar=c(0,0,5,0) # fixes the position of title
)
#title("Correlation Matrix for consolidated 5-Point Ratings", line = 1, cex.main = 2)
ratings_correlation_coeff_final
ratings_correlation_coeff_final <- cor_matrix_2
ratings_correlation_coeff_final
ratings_correlation_coeff_final <- cor_matrix_2['Pre_Flight_and_WiFi_Ratings','In_Flight_and_Baggage_Ratings']
ratings_correlation_coeff_final
# Create a correlation matrix with the combined ratings fields
cor_matrix_2 <- cor(data_ratings_combined, method = 'spearman')
# Create a correlation matrix with the combined ratings fields
cor_matrix_2 <- cor(data_ratings_combined, method = 'spearman')
# Visualize the correlation matrix
loadPkg("corrplot")
corrplot.mixed(
cor_matrix_2,
lower = "number",
upper = "circle",
tl.pos = "d",
tl.cex = 1,
number.cex = 1,
cl.cex = 1.5,
title="Correlation Matrix for consolidated 5-Point Ratings",
cex.main = 2,
mar=c(0,0,5,0) # fixes the position of title
)
#title("Correlation Matrix for consolidated 5-Point Ratings", line = 1, cex.main = 2)
ratings_correlation_coeff_final <- cor_matrix_2['Pre_Flight_and_WiFi_Ratings','In_Flight_and_Baggage_Ratings']
ratings_correlation_coeff_final
# Create a correlation matrix
cor_matrix_1 <- cor(data_ratings, method = 'spearman')
# Visualize the correlation matrix
loadPkg("corrplot")
corrplot.mixed(
cor_matrix_1,
lower = "number",
upper = "circle",
tl.pos = "lt",
tl.cex = 1,
number.cex = 1,
cl.cex = 1.5,
title="Correlation Matrix for all 5-Point Ratings",
cex.main = 2,
mar=c(0,0,5,0) # fixes the position of title
)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, warning = FALSE)
data_ratings <- data[7:20]
describe(data_ratings)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
# geom_histogram(binwidth = 0.5, position = "dodge", alpha = 0.7, width = 10) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7)
labs(x = "Value", y = "Frequency") +
scale_fill_manual(values = colors) +
theme_minimal()
# Create your data frame
table_data <- data.frame(
Rating_Group_1 = c("In-Flight Wifi Service", "Departure / Arrival Time", "Ease of Online Booking", "Gate Location", "Online Boarding"),
Rating_Group_2 = c("Food and Drink", "Seat Comfort", "In-Flight Entertainment", "Onboard Service", "Leg Room Service")
)
# Create the table and apply formatting
formatted_table <- kable(table_data, "html")
# Load kableExtra package for ratings group table
library(kableExtra)
# Create your data frame
table_data <- data.frame(
Rating_Group_1 = c("In-Flight Wifi Service", "Departure / Arrival Time", "Ease of Online Booking", "Gate Location", "Online Boarding"),
Rating_Group_2 = c("Food and Drink", "Seat Comfort", "In-Flight Entertainment", "Onboard Service", "Leg Room Service")
)
# Create the table and apply formatting
formatted_table <- kable(table_data, "html")
formatted_table <- kable_styling(formatted_table, bootstrap_options = "striped")
formatted_table <- column_spec(formatted_table, column = 1, bold = TRUE)
formatted_table <- column_spec(formatted_table, column = 2, italic = TRUE)
formatted_table <- row_spec(formatted_table, row = 6, background = "yellow")
# Create your data frame
table_data <- data.frame(
Rating_Group_1 = c("In-Flight Wifi Service", "Departure / Arrival Time", "Ease of Online Booking", "Gate Location", "Online Boarding"),
Rating_Group_2 = c("Food and Drink", "Seat Comfort", "In-Flight Entertainment", "Onboard Service", "Leg Room Service")
)
# Create the table
formatted_table <- kable(table_data, "html")
# Apply styling to the table
formatted_table <- kable_styling(formatted_table, bootstrap_options = "striped")
formatted_table <- column_spec(formatted_table, column = 1, bold = TRUE)
formatted_table <- column_spec(formatted_table, column = 2, italic = TRUE)
formatted_table <- row_spec(formatted_table, row = 6, background = "yellow")
library(knitr)
# Apply styling to the table
formatted_table <- kable_styling(formatted_table, bootstrap_options = "striped")
# Create your data frame
table_data <- data.frame(
Rating_Group_1 = c("In-Flight Wifi Service", "Departure / Arrival Time", "Ease of Online Booking", "Gate Location", "Online Boarding"),
Rating_Group_2 = c("Food and Drink", "Seat Comfort", "In-Flight Entertainment", "Onboard Service", "Leg Room Service")
)
# Create the table
formatted_table <- kable(table_data, "html")
# Apply styling to the table
formatted_table <- kable_styling(formatted_table, bootstrap_options = "striped")
formatted_table <- column_spec(formatted_table, column = 1, bold = TRUE)
formatted_table <- column_spec(formatted_table, column = 2, italic = TRUE)
formatted_table <- row_spec(formatted_table, row = 6, background = "yellow")
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
# geom_histogram(binwidth = 0.5, position = "dodge", alpha = 0.7, width = 10) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7)
labs(x = "Value", y = "Frequency") +
scale_fill_manual(values = colors) +
theme_minimal() +
theme(
axis.text = element_text(size = 12),     # Adjust the size of axis labels
legend.text = element_text(size = 12)    # Adjust the size of legend text
)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 12),     # Adjust the size of axis labels
legend.text = element_text(size = 12)    # Adjust the size of legend text
)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 12),     # Adjust the size of axis labels
legend.text = element_text(size = 12)    # Adjust the size of legend text
)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 12),     # Adjust the size of axis labels
legend.text = element_text(size = 12)    # Adjust the size of legend text
)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 12),     # Adjust the size of axis labels
legend.text = element_text(size = 12)    # Adjust the size of legend text
)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 12),     # Adjust the size of axis labels
legend.text = element_text(size = 12)    # Adjust the size of legend text
)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 12),     # Adjust the size of axis labels
legend.text = element_text(size = 12)    # Adjust the size of legend text
)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 12),     # Adjust the size of axis labels
legend.text = element_text(size = 12)    # Adjust the size of legend text
)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 16),     # Adjust the size of axis labels
legend.text = element_text(size = 16)    # Adjust the size of legend text
) +
scale_y_continuous(labels = comma)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
commas <- function(x) {
format(x, big.mark = ",")
}
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 16),     # Adjust the size of axis labels
legend.text = element_text(size = 16)    # Adjust the size of legend text
) +
scale_y_continuous(labels = commas)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
commas <- function(x) {
format(x, big.mark = ",")
}
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 16),     # Adjust the size of axis labels
axis.title = element_text(size = 16, margin = margin(t = 6)),     # Adjust the size of axis title labels and add margins
legend.text = element_text(size = 16)    # Adjust the size of legend text
) +
scale_y_continuous(labels = commas)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
commas <- function(x) {
format(x, big.mark = ",")
}
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 16),     # Adjust the size of axis labels
axis.title = element_text(size = 16, margin = margin(t = 50)),     # Adjust the size of axis title labels and add margins
legend.text = element_text(size = 16)    # Adjust the size of legend text
) +
scale_y_continuous(labels = commas)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
commas <- function(x) {
format(x, big.mark = ",")
}
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 16),     # Adjust the size of axis labels
axis.title = element_text(size = 16, vjust = 10),     # Adjust the size of axis title labels and add margins
legend.text = element_text(size = 16)    # Adjust the size of legend text
) +
scale_y_continuous(labels = commas)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
commas <- function(x) {
format(x, big.mark = ",")
}
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 16),     # Adjust the size of axis labels
axis.title = element_text(size = 16, hjust = 10),     # Adjust the size of axis title labels and add margins
legend.text = element_text(size = 16)    # Adjust the size of legend text
) +
scale_y_continuous(labels = commas)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
commas <- function(x) {
format(x, big.mark = ",")
}
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "Value", y = "Frequency") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 16),     # Adjust the size of axis labels
axis.title = element_text(size = 16, margin = margin(b = 20)),     # Adjust the size of axis title labels and add margins
legend.text = element_text(size = 16)    # Adjust the size of legend text
) +
scale_y_continuous(labels = commas)
# Define ratings subset of main data frame
data_ratings <- data[7:20]
describe(data_ratings)
# Reshape the data into a long format
data_long <- tidyr::gather(data_ratings, variable, value)
colors <- c(
"red", "blue", "green", "purple", "orange",
"pink", "gray", "yellow", "cyan", "magenta",
"brown", "violet", "turquoise", "pink"
)
commas <- function(x) {
format(x, big.mark = ",")
}
# Create a clustered histogram with color-separated columns
ggplot(data_long, aes(x = value, fill = variable)) +
geom_histogram(binwidth = 0.5, position = position_dodge(0.7), alpha = 0.7) +  # Create the histogram
labs(x = "\nValue", y = "Frequency\n", color = "Ratings Variables\n") +  # Add axis labels
scale_fill_manual(values = colors) +  # Set custom colors
theme_minimal() +  # Apply a minimal theme
theme(
axis.text = element_text(size = 20),     # Adjust the size of text elements
axis.title = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20),
legend.key.size = unit(2, "lines")
) +
scale_y_continuous(labels = commas)
